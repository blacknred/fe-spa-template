// import {
//   render as rtlRender,
//   screen,
//   waitForElementToBeRemoved,
// } from '@testing-library/react';
// import userEvent from '@testing-library/user-event';
// import { FunctionComponent } from 'react';

// import { AppProvider } from '@/providers/app';
// import storage from '@/utils/storage';

// import { discussionGenerator, userGenerator } from './data-generators';
// import { db } from './db';
// import { authenticate, hash } from './server/utils';

// export const createUser = async (userProperties?: any) => {
//   const user = userGenerator(userProperties);
//   await db.user.create({ ...user, password: hash(user.password) });
//   return user;
// };

// export const createDiscussion = async (discussionProperties?: any) => {
//   const discussion = discussionGenerator(discussionProperties);
//   const res = await db.discussion.create(discussion);
//   return res;
// };

// export const loginAsUser = async (user: any) => {
//   const authUser = await authenticate(user);
//   storage.setToken(authUser.jwt);
//   return authUser;
// };

// export const waitForLoadingToFinish = () =>
//   waitForElementToBeRemoved(
//     () => [
//       ...screen.queryAllByTestId(/loading/i),
//       ...screen.queryAllByText(/loading/i),
//     ],
//     { timeout: 4000 },
//   );

// const initializeUser = async (user: any) => {
//   if (typeof user === 'undefined') {
//     return await loginAsUser(await createUser());
//   } else if (user) {
//     return await loginAsUser(user);
//   } else {
//     return null;
//   }
// };

// // eslint-disable-next-line import/export
// export const render = async (
//   ui: any,
//   { route = '/', user, ...renderOptions }: Record<string, any> = {},
// ) => {
//   // if you want to render the app unauthenticated then pass "null" as the user
//   user = await initializeUser(user);

//   window.history.pushState({}, 'Test page', route);

//   const returnValue = {
//     ...rtlRender(ui, {
//       wrapper: AppProvider as FunctionComponent<unknown>,
//       ...renderOptions,
//     }),
//     user,
//   };

//   await waitForLoadingToFinish();

//   return returnValue;
// };

// // eslint-disable-next-line import/export
// export * from '@testing-library/react';
// export { userEvent, rtlRender };



import { QueryCache, QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { render } from '@testing-library/react'

type WrapperProps = { children: React.ReactNode }

export const createCache = () => new QueryCache()

export const createTestClient = () =>
  new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
        cacheTime: Infinity,
      },
    },
    logger: {
      // eslint-disable-next-line no-console
      log: console.log,
      // eslint-disable-next-line no-console
      warn: console.warn,
      // eslint-disable-next-line @typescript-eslint/no-empty-function, no-console
      error: import.meta.env.MODE === 'development' ? () => {} : console.error,
    },
  })

export const createQueryHookWrapper = () => {
  const queryClient = createTestClient()

  const wrapper = ({ children }: WrapperProps) => (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  )

  return wrapper
}

export const renderWithQueryClient = (component: React.ReactElement) => {
  const queryClient = createTestClient()
  const { rerender, ...rest } = render(
    <QueryClientProvider client={queryClient}>{component}</QueryClientProvider>,
  )
  return {
    ...rest,
    rerender: (comp: React.ReactElement) =>
      rerender(<QueryClientProvider client={queryClient}>{comp}</QueryClientProvider>),
  }
}
